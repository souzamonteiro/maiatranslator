#!/usr/bin/env maiascript

///
/// @license
/// Copyright 2020 Roberto Luiz Souza Monteiro,
///                Renata Souza Barreto,
///                Hernane Borges de Barros Pereira.
///
/// Licensed under the Apache License, Version 2.0 (the "License")
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eitherMath.express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///

///
/// MaiaTranslator core class.
/// @namespace maiatranslator
///
namespace maiatranslator {
    appTitle = "MaiaTranslator"
    appName = "maiatranslator"
    scriptPath = "./"
    
    /// Starts the application and processes the data passed as command line arguments.
    /// @method run
    /// @memberof maiatranslator
    function run() {
        // Supports only the Node.js interpreter.
        if (core.type(process) != "undefined") {
            command = "node"
            
            fs = system.require("fs")

            realPath = fs.realpathSync(system.argv[0])
            filePath = realPath.split("/")
            filePath = core.slice(filePath, 0, filePath.length - 2)
            filePath = filePath.join("/")
            this.scriptPath = filePath
            
            readTextFile = fs.readFileSync

            // Read file callback.
            function readFile(input) {
                content = readTextFile(input, "utf-8")
                return(content)
            }
            
            // Command line options.
            inputFile = ""
            outputFile = ""
            source = "en"
            target = "pt"
            
            // Get command line arguments.
            if (system.argc > 1) {
                i = 1
                while (i < system.argc) {
                    if ((system.argv[i] == "-h") || (system.argv[i] == "--help")) {
                        system.log(maiatranslator.appTitle + " Command Line Interface (CLI)")
                        system.log("Usage: " + maiatranslator.appName + " [options] [input file] [--] [arguments]")
                        system.log("Options:")
                        system.log("-h     --help               Displays this help message.")
                        system.log("-i     [input file]         Input file name.")
                        system.log("-o     [output file]        Output file name.")
                        system.log("       --source             Source language.")
                        system.log("       --target             Target language.")
                        process.exit(0)
                    } elseif (system.argv[i] == "-i") {
                        i = i + 1
                        inputFile = system.argv[i]
                    } elseif (system.argv[i] == "-o") {
                        i = i + 1
                        outputFile = system.argv[i]
                    } elseif (system.argv[i] == "--source") {
                        i = i + 1
                        source = system.argv[i]
                    } elseif (system.argv[i] == "--target") {
                        i = i + 1
                        target = system.argv[i]
                    } else {
                        inputFile = system.argv[i]
                        break
                    }
                    i = i + 1
                }
                
                local Glob = system.require("glob")

                // Process each file based on glob pattern.
                async processFiles(er, files) {
                    if (files.length == 0) {
                        system.log(maiatranslator.appTitle + " Command Line Interface (CLI)")
                        system.log("Usage: " + maiatranslator.appName + " [options] [input file] [--] [arguments]")
                    } else {
                        for (i = 0; i < files.length; i = i + 1) {
                            // Get the full file name.
                            file = files[i]

                            system.log("Processing file '" + file + "'...")

                            // Get the file without extension.
                            fileName = file.split(".")
                            fileName = fileName.shift()
                            // Get the file name extension.
                            fileExtension = file.split(".")
                            fileExtension = fileExtension.pop()

                            if (outputFile == "") {
                                outputFile = fileName + "-" + target + "." + fileExtension
                            }

                            function onData(data) {
                                buffer := Buffer.from(data)
                                system.log(buffer.toString("utf8"))
                            }
                            function onClose(data) {
                                system.log("File '" + file + "' processed.")
                            }

                            childProcess = system.require("child_process")
                            python3 = childProcess.spawn("python3", [filePath + "/bin/translator.py", "-i", file, "-o", outputFile, "--source", source, "--target", target])
                            python3.stdout.on("data", onData)
                            python3.stderr.on("data", onData)
                            python3.on("close", onClose)
                        }
                    }
                }
                
                options = []

                // Get all file names based on glob pattern.
                local glob := Glob(inputFile, options, processFiles)
            } else {
                system.log(maiatranslator.appTitle + " Command Line Interface (CLI)")
                system.log("Usage: " + maiatranslator.appName + " [options] [input file] [--] [arguments]")
            }
        }
    }
}

// Run the MaiaApp code if this script has been invoked
// from the command line.
if (core.type(process) != "undefined") {
    maiatranslator.run()
}